version: 2.1

orbs:
  win: circleci/windows@5.0.0
  node: circleci/node@5.0.3

workflows:
  release:
    jobs:
      - release:
          context: [shared-secrets]
          filters:
            branches:
              only: [main]

  release-please:
    jobs:
      - release-please:
          context: [shared-secrets]
          filters:
            branches:
              only: [main]

  'Test & Check 🕵️‍♀️':
    jobs:
      - formatting:
          filters:
            branches:
              # don't run this job on a release PR branch
              ignore: /^move-testing-.*$/
      - test:
          matrix:
            parameters:
              os: [linux, macos, windows]
              node-version: ['12.20.0', '18.10.0']
      - test-netlify-build:
          matrix:
            parameters:
              os: [linux, macos, windows]
              node-version: ['12.20.0', '18.10.0']

executors:
  node:
    docker:
      - image: cimg/node:18.10.0
  windows:
    machine:
      image: windows-server-2022-gui:current
    resource_class: windows.large
    shell: bash.exe
  linux:
    machine:
      image: ubuntu-2004:202201-02
    resource_class: medium
  macos:
    resource_class: macos.x86.medium.gen2 # new generation resources
    macos:
      xcode: 13.0.0

commands:
  install-deno:
    steps:
      - run:
          name: Install deno
          command: |
            curl -fsSL https://deno.land/install.sh | bash -s v1.0.0

            echo 'export DENO_INSTALL="/Users/distiller/.deno"' >> "$BASH_ENV"
            echo 'export PATH="$DENO_INSTALL/bin:$PATH"' >> "$BASH_ENV"

            source "$BASH_ENV"
            deno --version

  npm-install-deps:
    parameters:
      command:
        description: The install command that is used
        type: string
        default: npm install
    steps:
      - restore_cache:
          keys:
            - npm-{{ arch }}-v1-{{ checksum "package-lock.json" }}
            - npm-{{ arch }}-v1
      - run: << parameters.command >>
      - save_cache:
          key: npm-{{ arch }}-v1-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

jobs:
  release:
    description: The release action that runs on the main branch
    executor: node
    steps:
      - checkout
      - npm-install-deps
      - run: npm run build
      - run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run: npx lerna publish from-package --yes --no-private
      - run:
          name: Create Github Release
          command: |
            npx release-please github-release \
              --token "${GITHUB_RELEASES_TOKEN}" \
              --repo-url "${CIRCLE_REPOSITORY_URL}" \

  release-please:
    description: Update and creates release PRs on the main branch
    executor: node
    steps:
      - checkout
      - run:
          name: Run release-please
          command: |
            npx release-please release-pr \
              --token "${GITHUB_RELEASES_TOKEN}" \
              --repo-url "${CIRCLE_REPOSITORY_URL}" \

  formatting:
    description: Checks if the codebase satisfies wit the lint and style rules
    executor: node
    steps:
      - checkout
      - npm-install-deps
      - run: npm run format:ci
      - run: npm run lint:ci

  test:
    parameters:
      os:
        type: string
      node-version:
        type: string
    executor: << parameters.os >>
    steps:
      - checkout
      - node/install:
          node-version: '<< parameters.node-version >>'
      - run: nvm use << parameters.node-version >> # This is needed on windows machines
      - run: node --version
      - npm-install-deps
      - run: |
          ls -lah node_modules/@netlify
      # - run: npx lerna bootstrap
      - run: npm run build
      # - run: npx nx affected --base=origin/main --target test:ci --exclude=@netlify/build

  test-netlify-build:
    parameters:
      os:
        type: string
      node-version:
        type: string
    executor: << parameters.os >>
    parallelism: 4
    environment:
      CI_NODE_INDEX: $CIRCLE_NODE_INDEX
      CI_NODE_TOTAL: $CIRCLE_NODE_TOTAL
    steps:
      - checkout
      - node/install:
          node-version: '<< parameters.node-version >>'
      - run: nvm use << parameters.node-version >> # This is needed on windows machines
      - run: node --version
      - npm-install-deps:
          command: npm install
      - run: |
          echo CI_NODE_INDEX: $CI_NODE_INDEX
          echo CI_NODE_TOTAL: $CI_NODE_TOTAL
      - install-deno
      - run: deno --version
